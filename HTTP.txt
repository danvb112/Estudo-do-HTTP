HTTP

- No momento em que voçê acessa um site, existe uma comunicação entre o navegador e o servidor chamada
de Client-Server. Este é um modelo arquitetural, ou seja, a internet inteira é baseada nesta arquitetura
onde há um cliente que solicita e um servidor que responde.

- Em qualquer comunicação, é preciso existir algumas regras para que as duas partes consigam se entender
com sucesso. Pensando na comunicação entre o navegador e o servidor, esse conjunto de regras é basica-
mente um protocolo, onde neste cenário é o HTTP

- Resumindo: O HTTP (Hypertext Transfer Protocol) é um protocolo que define as regras de comunicação 
entre cliente e servidor na internet

- Nesse modelo, o navegador representa o cliente

- O modelo Cliente-Servidor não é o único modelo de comunicação na rede, nem sempre o mais adequado. Por
exemplo, imagine que precisemos contar as letras de 20 palavras. No caso do modelo Cliente-Servidor,
quem fará esse trabalho é o servidor. E se precisar contar as letras de 1 milhão de palavras? muito tra-
balhoso para o servidor...

- O modelo Cliente-Servidor tenta centralizar o trabalho no servidor, mas isso também pode gerar gar-
galos. Se cada cleinte pudesse ajudar no trabahlo, ou seja, assumir um pouco da responsabilidade do ser-
vidor, seria muito mais rápido. Essa é a ideia do P2P (torrents por exemplo)! não há mais uma clara 
divisão entre Cliente-Servidor, cada cliente também é servidor e vice-cersa.

- Há arquiteturas muito mais complexas, mas a grande maioria usa o protocolo HTTP no topo. O protocolo
HTTP garante a conectividade. Isso quer dizer que o protocolo HTTP funciona em todos os lugares, sem
ter problemas com firewalls e outras regras de segurança. Nós podemos nos conectar sem maiores problemas
com qualquer servidor no mundo!

- Quando usamos o HTTP, todos os dados enviados entre cliente e servidor são transmitidos em texto puro,
inclusive dados sensíveis, como login e senha. Essas informações são enviadas em texto limpo e é possi-
vel vizualiza-las pelas ferramentas do desenvolvedor do navegador. A aba network nos possibilita isso.

- Quando o navegador pede informações, nessa comunicação existem vários intermediários. Por exemplo,
usando uma conexão WI-FI, os dados do navegador passam primeiro para o roteador WI-FI, e do roteador
passam para o modem do provedro, do modem para algum servidor do provedor, do modem para algum servidor
do provedor de internet, como Oi ou NET.

- O problema é, quando usamos HTTP, qualquer servidor no meio pode espionar dados enviados, algo total-
mente inseguro! Para estes outros cenários, existe o HTTPSm que basicamente é o HTTP comum, porém com 
uma camada adicional de segurança/criptografia que antes era SSL, mas posteriormente passou a ser tam-
bém TLS. é muito comum que estas duas siglas sejam encontradas juntas como SSL/TLS por se tratarem da 
mesma questão de segurança. Sendo assim, temos dois termos:
1. HTTP: HyperText Transfer Protocol
2. SSL/TLS: Secure Sockets Layer / Transport Layer Security

- O HTTPS para garantir a segurança usa criptograia baseada em chaves públicas e privadas e para gerar
essas chaves publicas e privadas é preciso garantir a identidade de quem possui essas chaves e isso é
feito a partir de um certificado digital, ou seja, um certificado digital é utilizado para identificar
determinada entidade e ainda é utilizada para geração de criptografia.

- Apesar disso, ainda é necessário que uma autoridade certificadora, que nada mais é do que um orgão ou
entidade confiável, garanta não apenas a identidade do site mas também a validade do certificado.

- OS navegadores em posse da chave pública criptografam as informações e as enviam para o servidor
que as descriptografa com a chave privada. É importante notar que apenas a chave privada descriptografa
as informações criptografadas com a pública, e também que deve-se manter a chave privada segura.

- Como temos duas chaves envolvidas, esse método de criptografia é chamado de criptografia assimetrica
e tem um problema, ela é lenta.

- Por outro lado temos a criptografia simétrica, que usa a mesma chave para cifrar e decifrar os dados
como na vida real, onde usamos a mesma chave para abrir e fechar a porta. A criptografia simétrica é 
muito mais rápida, mas infelizmente não tão segura. como exite apenas uma chave, ela ficará espalhada 
pelos clientes (navegadores) e qualquer um que tenha posse dessa chave, pode decifrar a comunicação.

- O interessante é que o HTTPS usa ambos os métodos de criptografia, simétrica e assimétrica.

- No certificado, vem a chave pública para o cliente utilizar e o servidor continua de posse da chave
privada. Isso é seguro, mas lento por isso o cliente gera uma chave simétrica ao vivo. Uma chave só pra
ele e o servidor com o qual está se comunicando naquele momento. Essa chave exclusiva (e simétrica) é
então enviada para o servidor utilizando uma criptografia assimétrica (chave pública e privada) e então
é usada para o restante da comunicação.

- Então o HTTPS começa com criptografia assimétrica para depois mudar para criptografia simétrica. Essa 
chave simétrica será gerada no inicio da comunicação e será reaproveitada nas requuisições seguintes.

- Já sabemos que o endereço começa com http ou https. Repare que depois do nome do protocolo, vem ://
seguido pelo nome do site. No vocabulário do desenvolvedor "www.alura.com.br" é o domínio (ou domain).
A abreviação "www" representa "world wide web"

- Olhando da direita para esquerda, o domínio que começa com "br", indicando um site do Brasil. O "br"
representa o "top level domain", está na raiz do domínio. Depois vem o "com" abreviação de comercial e
"alura". O "com" e o "alura" são sub-domínios. 

- O "www" representa também um sub-domínio, no entanto o seu uso é opcional, tanto que "alura.com.br" e
"www.alura.com.br" funcionam e mostram a mesma página.

- Existe também a ideia de sub-domínios que representam sessões dentro de um site. Por exemplo no caso
do Gmail temos: "mail.google.com" ou ainda no caso do google drive, temos: "drive.google.com". Tanto o
Gmail quanto o Drive são sub-dominios do domínio Google.

- O nome do domíno pe organizado em uma hierarquia que foi criada para organizar os sites na internet
e para a gente ter algo fácil para se lembrar. A internet funciona na verdade sem esses domínios. As 
máquinas na internet tem outra forma de se endereçar. Elas usam o que se chama endereços de IP, que 
nada mais são do que números, muito difícil para a gente decorar.

- Mas a gente não acessa o Google por um número e sim pela URL. Acontece que por debaixo dos panos quan-
do realizamos uma requisição essa URL é trasformada em um número por um serviço trasparente chamado de 
DNS (Domain Name System). Esse serviço age como um grande banco de dados de domínios. Portanto quando
fazemos uma requisição para "alura.com.br" o DNS age transformando para um IP e a requisição prossegue.

- Agora imagine que o servidor é uma casa: dependendo da casa há varias portas disponíveis. O que é pre-
ciso saber é qual porta devemos utilizar quando chegarmos na casa. Ou seja devemos saber qual porta é
utilizada ppara o protocolo HTTP.

- A porta reservada para o protocolo HTTP é o 80. Novamente um número, e como o navegador já sabe essa
porta padrão, podemos omiti-la, mas nada nos impede de adiciona-la no endereço, por exemplo:
http://www.alura.com.br:80

- Se tentarmos colocar uma outra porta, 81 por exemplo, não funciona, pois essa porta não está aberta
no servidor, não podemos estabelecer uma conexão e o tempo de conexão vai se esgotar. Igualmente o pro-
tocolo HTTPS ´pssui uma porta padrão, a porta 443, que também podemos omitir ao acessarmos um endereço
HTTPS.

- Navegando dentro da Alura, mais informações aparecem depois do nome e do domínio. Por exemplo, para 
acessar a página principal dos cursos, usamos https://cursos.alura.com.br/dashboard. O /dashboard é um 
recurso (resource) do site que gostaríamos de acessar. Existem vários outros recursos na Alura como as 
carreiras (/careers), ou o fórum de discussões (/forum). O importante é que cada recurso possua o seu 
nome único.

- Estamos usando regras bem definidas para descrever a localização de um recurso na web. Todos os ende-
reços na web sempre seguem esse mesmo padrão: "protocolo://dominio:porta/caminho/recurso". Esse padrão
na verdade segue uma especificação que foi batizada de Uniform Resource Locator, abreviada como URL.
Então as URLs são os endereços na web.

- Muitas vezes, desenvolvedores usam a sligla URI (Uniform Resourse Identifier) quando falam de endere-
ços na web. Alguns preferem URL, e alguns misturam as duas siglas à vontadae. Há uma certa confusão no 
mercado a respeito e mesmo desenvolvedores experientes não sabem explicar a diferença.

- Uma URL é uma URI. No contexto do desenvolvimento web, ambas as siglas são válidas para falar de ende-
reços na web. As siglas são praticamente sinônimos e são utilizadas dessa forma.

- Uma URL é uma URI, mas nem todas as URIs são URLs que identificam um recurso sem definir o endereço,
nem o protocolo. Em outras palavras uma URL representa a identificação de um recurso (URI) através do 
endereço, mas nem todas as identificações são URLs.

-


